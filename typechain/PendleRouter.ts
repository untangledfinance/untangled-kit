/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type ExitPostExpReturnParamsStruct = {
  netPtFromRemove: BigNumberish;
  netSyFromRemove: BigNumberish;
  netPtRedeem: BigNumberish;
  netSyFromRedeem: BigNumberish;
  totalSyOut: BigNumberish;
};

export type ExitPostExpReturnParamsStructOutput = [
  netPtFromRemove: bigint,
  netSyFromRemove: bigint,
  netPtRedeem: bigint,
  netSyFromRedeem: bigint,
  totalSyOut: bigint
] & {
  netPtFromRemove: bigint;
  netSyFromRemove: bigint;
  netPtRedeem: bigint;
  netSyFromRedeem: bigint;
  totalSyOut: bigint;
};

export type ExitPreExpReturnParamsStruct = {
  netPtFromRemove: BigNumberish;
  netSyFromRemove: BigNumberish;
  netPyRedeem: BigNumberish;
  netSyFromRedeem: BigNumberish;
  netPtSwap: BigNumberish;
  netYtSwap: BigNumberish;
  netSyFromSwap: BigNumberish;
  netSyFee: BigNumberish;
  totalSyOut: BigNumberish;
};

export type ExitPreExpReturnParamsStructOutput = [
  netPtFromRemove: bigint,
  netSyFromRemove: bigint,
  netPyRedeem: bigint,
  netSyFromRedeem: bigint,
  netPtSwap: bigint,
  netYtSwap: bigint,
  netSyFromSwap: bigint,
  netSyFee: bigint,
  totalSyOut: bigint
] & {
  netPtFromRemove: bigint;
  netSyFromRemove: bigint;
  netPyRedeem: bigint;
  netSyFromRedeem: bigint;
  netPtSwap: bigint;
  netYtSwap: bigint;
  netSyFromSwap: bigint;
  netSyFee: bigint;
  totalSyOut: bigint;
};

export type OrderStruct = {
  salt: BigNumberish;
  expiry: BigNumberish;
  nonce: BigNumberish;
  orderType: BigNumberish;
  token: AddressLike;
  YT: AddressLike;
  maker: AddressLike;
  receiver: AddressLike;
  makingAmount: BigNumberish;
  lnImpliedRate: BigNumberish;
  failSafeRate: BigNumberish;
  permit: BytesLike;
};

export type OrderStructOutput = [
  salt: bigint,
  expiry: bigint,
  nonce: bigint,
  orderType: bigint,
  token: string,
  YT: string,
  maker: string,
  receiver: string,
  makingAmount: bigint,
  lnImpliedRate: bigint,
  failSafeRate: bigint,
  permit: string
] & {
  salt: bigint;
  expiry: bigint;
  nonce: bigint;
  orderType: bigint;
  token: string;
  YT: string;
  maker: string;
  receiver: string;
  makingAmount: bigint;
  lnImpliedRate: bigint;
  failSafeRate: bigint;
  permit: string;
};

export type FillOrderParamsStruct = {
  order: OrderStruct;
  signature: BytesLike;
  makingAmount: BigNumberish;
};

export type FillOrderParamsStructOutput = [
  order: OrderStructOutput,
  signature: string,
  makingAmount: bigint
] & { order: OrderStructOutput; signature: string; makingAmount: bigint };

export type LimitOrderDataStruct = {
  limitRouter: AddressLike;
  epsSkipMarket: BigNumberish;
  normalFills: FillOrderParamsStruct[];
  flashFills: FillOrderParamsStruct[];
  optData: BytesLike;
};

export type LimitOrderDataStructOutput = [
  limitRouter: string,
  epsSkipMarket: bigint,
  normalFills: FillOrderParamsStructOutput[],
  flashFills: FillOrderParamsStructOutput[],
  optData: string
] & {
  limitRouter: string;
  epsSkipMarket: bigint;
  normalFills: FillOrderParamsStructOutput[];
  flashFills: FillOrderParamsStructOutput[];
  optData: string;
};

export type SwapDataStruct = {
  swapType: BigNumberish;
  extRouter: AddressLike;
  extCalldata: BytesLike;
  needScale: boolean;
};

export type SwapDataStructOutput = [
  swapType: bigint,
  extRouter: string,
  extCalldata: string,
  needScale: boolean
] & {
  swapType: bigint;
  extRouter: string;
  extCalldata: string;
  needScale: boolean;
};

export type TokenOutputStruct = {
  tokenOut: AddressLike;
  minTokenOut: BigNumberish;
  tokenRedeemSy: AddressLike;
  pendleSwap: AddressLike;
  swapData: SwapDataStruct;
};

export type TokenOutputStructOutput = [
  tokenOut: string,
  minTokenOut: bigint,
  tokenRedeemSy: string,
  pendleSwap: string,
  swapData: SwapDataStructOutput
] & {
  tokenOut: string;
  minTokenOut: bigint;
  tokenRedeemSy: string;
  pendleSwap: string;
  swapData: SwapDataStructOutput;
};

export type ApproxParamsStruct = {
  guessMin: BigNumberish;
  guessMax: BigNumberish;
  guessOffchain: BigNumberish;
  maxIteration: BigNumberish;
  eps: BigNumberish;
};

export type ApproxParamsStructOutput = [
  guessMin: bigint,
  guessMax: bigint,
  guessOffchain: bigint,
  maxIteration: bigint,
  eps: bigint
] & {
  guessMin: bigint;
  guessMax: bigint;
  guessOffchain: bigint;
  maxIteration: bigint;
  eps: bigint;
};

export type TokenInputStruct = {
  tokenIn: AddressLike;
  netTokenIn: BigNumberish;
  tokenMintSy: AddressLike;
  pendleSwap: AddressLike;
  swapData: SwapDataStruct;
};

export type TokenInputStructOutput = [
  tokenIn: string,
  netTokenIn: bigint,
  tokenMintSy: string,
  pendleSwap: string,
  swapData: SwapDataStructOutput
] & {
  tokenIn: string;
  netTokenIn: bigint;
  tokenMintSy: string;
  pendleSwap: string;
  swapData: SwapDataStructOutput;
};

export interface PendleRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "swapExactPtForSy"
      | "swapExactPtForToken"
      | "swapExactSyForPt"
      | "swapExactTokenForPt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddLiquidityDualSyAndPt"
      | "AddLiquidityDualTokenAndPt"
      | "AddLiquiditySinglePt"
      | "AddLiquiditySingleSy"
      | "AddLiquiditySingleSyKeepYt"
      | "AddLiquiditySingleToken"
      | "AddLiquiditySingleTokenKeepYt"
      | "ExitPostExpToSy"
      | "ExitPostExpToToken"
      | "ExitPreExpToSy"
      | "ExitPreExpToToken"
      | "MintPyFromSy"
      | "MintPyFromToken"
      | "MintSyFromToken"
      | "OwnershipTransferred"
      | "RedeemPyToSy"
      | "RedeemPyToToken"
      | "RedeemSyToToken"
      | "RemoveLiquidityDualSyAndPt"
      | "RemoveLiquidityDualTokenAndPt"
      | "RemoveLiquiditySinglePt"
      | "RemoveLiquiditySingleSy"
      | "RemoveLiquiditySingleToken"
      | "SelectorToFacetSet"
      | "SwapPtAndSy"
      | "SwapPtAndToken"
      | "SwapYtAndSy"
      | "SwapYtAndToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "swapExactPtForSy",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      LimitOrderDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForToken",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      TokenOutputStruct,
      LimitOrderDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactSyForPt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      ApproxParamsStruct,
      LimitOrderDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokenForPt",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      ApproxParamsStruct,
      TokenInputStruct,
      LimitOrderDataStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "swapExactPtForSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactSyForPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokenForPt",
    data: BytesLike
  ): Result;
}

export namespace AddLiquidityDualSyAndPtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netSyUsed: BigNumberish,
    netPtUsed: BigNumberish,
    netLpOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netSyUsed: bigint,
    netPtUsed: bigint,
    netLpOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netSyUsed: bigint;
    netPtUsed: bigint;
    netLpOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquidityDualTokenAndPtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    tokenIn: AddressLike,
    receiver: AddressLike,
    netTokenUsed: BigNumberish,
    netPtUsed: BigNumberish,
    netLpOut: BigNumberish,
    netSyInterm: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    tokenIn: string,
    receiver: string,
    netTokenUsed: bigint,
    netPtUsed: bigint,
    netLpOut: bigint,
    netSyInterm: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    tokenIn: string;
    receiver: string;
    netTokenUsed: bigint;
    netPtUsed: bigint;
    netLpOut: bigint;
    netSyInterm: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySinglePtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netPtIn: BigNumberish,
    netLpOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netPtIn: bigint,
    netLpOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netPtIn: bigint;
    netLpOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySingleSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netSyIn: BigNumberish,
    netLpOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netSyIn: bigint,
    netLpOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netSyIn: bigint;
    netLpOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySingleSyKeepYtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netSyIn: BigNumberish,
    netSyMintPy: BigNumberish,
    netLpOut: BigNumberish,
    netYtOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netSyIn: bigint,
    netSyMintPy: bigint,
    netLpOut: bigint,
    netYtOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netSyIn: bigint;
    netSyMintPy: bigint;
    netLpOut: bigint;
    netYtOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySingleTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netTokenIn: BigNumberish,
    netLpOut: BigNumberish,
    netSyInterm: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netTokenIn: bigint,
    netLpOut: bigint,
    netSyInterm: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netTokenIn: bigint;
    netLpOut: bigint;
    netSyInterm: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquiditySingleTokenKeepYtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netTokenIn: BigNumberish,
    netLpOut: BigNumberish,
    netYtOut: BigNumberish,
    netSyMintPy: BigNumberish,
    netSyInterm: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netTokenIn: bigint,
    netLpOut: bigint,
    netYtOut: bigint,
    netSyMintPy: bigint,
    netSyInterm: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netTokenIn: bigint;
    netLpOut: bigint;
    netYtOut: bigint;
    netSyMintPy: bigint;
    netSyInterm: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitPostExpToSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netLpIn: BigNumberish,
    params: ExitPostExpReturnParamsStruct
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netLpIn: bigint,
    params: ExitPostExpReturnParamsStructOutput
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netLpIn: bigint;
    params: ExitPostExpReturnParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitPostExpToTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netLpIn: BigNumberish,
    totalTokenOut: BigNumberish,
    params: ExitPostExpReturnParamsStruct
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netLpIn: bigint,
    totalTokenOut: bigint,
    params: ExitPostExpReturnParamsStructOutput
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netLpIn: bigint;
    totalTokenOut: bigint;
    params: ExitPostExpReturnParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitPreExpToSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netLpIn: BigNumberish,
    params: ExitPreExpReturnParamsStruct
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netLpIn: bigint,
    params: ExitPreExpReturnParamsStructOutput
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netLpIn: bigint;
    params: ExitPreExpReturnParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitPreExpToTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netLpIn: BigNumberish,
    totalTokenOut: BigNumberish,
    params: ExitPreExpReturnParamsStruct
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netLpIn: bigint,
    totalTokenOut: bigint,
    params: ExitPreExpReturnParamsStructOutput
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netLpIn: bigint;
    totalTokenOut: bigint;
    params: ExitPreExpReturnParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintPyFromSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    YT: AddressLike,
    netSyIn: BigNumberish,
    netPyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    YT: string,
    netSyIn: bigint,
    netPyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    YT: string;
    netSyIn: bigint;
    netPyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintPyFromTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    tokenIn: AddressLike,
    YT: AddressLike,
    receiver: AddressLike,
    netTokenIn: BigNumberish,
    netPyOut: BigNumberish,
    netSyInterm: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    tokenIn: string,
    YT: string,
    receiver: string,
    netTokenIn: bigint,
    netPyOut: bigint,
    netSyInterm: bigint
  ];
  export interface OutputObject {
    caller: string;
    tokenIn: string;
    YT: string;
    receiver: string;
    netTokenIn: bigint;
    netPyOut: bigint;
    netSyInterm: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintSyFromTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    tokenIn: AddressLike,
    SY: AddressLike,
    receiver: AddressLike,
    netTokenIn: BigNumberish,
    netSyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    tokenIn: string,
    SY: string,
    receiver: string,
    netTokenIn: bigint,
    netSyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    tokenIn: string;
    SY: string;
    receiver: string;
    netTokenIn: bigint;
    netSyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemPyToSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    YT: AddressLike,
    netPyIn: BigNumberish,
    netSyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    YT: string,
    netPyIn: bigint,
    netSyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    YT: string;
    netPyIn: bigint;
    netSyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemPyToTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    tokenOut: AddressLike,
    YT: AddressLike,
    receiver: AddressLike,
    netPyIn: BigNumberish,
    netTokenOut: BigNumberish,
    netSyInterm: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    tokenOut: string,
    YT: string,
    receiver: string,
    netPyIn: bigint,
    netTokenOut: bigint,
    netSyInterm: bigint
  ];
  export interface OutputObject {
    caller: string;
    tokenOut: string;
    YT: string;
    receiver: string;
    netPyIn: bigint;
    netTokenOut: bigint;
    netSyInterm: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemSyToTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    tokenOut: AddressLike,
    SY: AddressLike,
    receiver: AddressLike,
    netSyIn: BigNumberish,
    netTokenOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    tokenOut: string,
    SY: string,
    receiver: string,
    netSyIn: bigint,
    netTokenOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    tokenOut: string;
    SY: string;
    receiver: string;
    netSyIn: bigint;
    netTokenOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityDualSyAndPtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netPtOut: BigNumberish,
    netSyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netLpToRemove: bigint,
    netPtOut: bigint,
    netSyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: bigint;
    netPtOut: bigint;
    netSyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityDualTokenAndPtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    tokenOut: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netPtOut: BigNumberish,
    netTokenOut: BigNumberish,
    netSyInterm: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    tokenOut: string,
    receiver: string,
    netLpToRemove: bigint,
    netPtOut: bigint,
    netTokenOut: bigint,
    netSyInterm: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    tokenOut: string;
    receiver: string;
    netLpToRemove: bigint;
    netPtOut: bigint;
    netTokenOut: bigint;
    netSyInterm: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquiditySinglePtEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netPtOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netLpToRemove: bigint,
    netPtOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: bigint;
    netPtOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquiditySingleSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netSyOut: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netLpToRemove: bigint,
    netSyOut: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netLpToRemove: bigint;
    netSyOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquiditySingleTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netLpToRemove: BigNumberish,
    netTokenOut: BigNumberish,
    netSyInterm: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netLpToRemove: bigint,
    netTokenOut: bigint,
    netSyInterm: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netLpToRemove: bigint;
    netTokenOut: bigint;
    netSyInterm: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelectorToFacetSetEvent {
  export type InputTuple = [selector: BytesLike, facet: AddressLike];
  export type OutputTuple = [selector: string, facet: string];
  export interface OutputObject {
    selector: string;
    facet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapPtAndSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netPtToAccount: BigNumberish,
    netSyToAccount: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netPtToAccount: bigint,
    netSyToAccount: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netPtToAccount: bigint;
    netSyToAccount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapPtAndTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netPtToAccount: BigNumberish,
    netTokenToAccount: BigNumberish,
    netSyInterm: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netPtToAccount: bigint,
    netTokenToAccount: bigint,
    netSyInterm: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netPtToAccount: bigint;
    netTokenToAccount: bigint;
    netSyInterm: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapYtAndSyEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    receiver: AddressLike,
    netYtToAccount: BigNumberish,
    netSyToAccount: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    receiver: string,
    netYtToAccount: bigint,
    netSyToAccount: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    receiver: string;
    netYtToAccount: bigint;
    netSyToAccount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapYtAndTokenEvent {
  export type InputTuple = [
    caller: AddressLike,
    market: AddressLike,
    token: AddressLike,
    receiver: AddressLike,
    netYtToAccount: BigNumberish,
    netTokenToAccount: BigNumberish,
    netSyInterm: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    market: string,
    token: string,
    receiver: string,
    netYtToAccount: bigint,
    netTokenToAccount: bigint,
    netSyInterm: bigint
  ];
  export interface OutputObject {
    caller: string;
    market: string;
    token: string;
    receiver: string;
    netYtToAccount: bigint;
    netTokenToAccount: bigint;
    netSyInterm: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PendleRouter extends BaseContract {
  connect(runner?: ContractRunner | null): PendleRouter;
  waitForDeployment(): Promise<this>;

  interface: PendleRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  swapExactPtForSy: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtIn: BigNumberish,
      minSyOut: BigNumberish,
      limit: LimitOrderDataStruct
    ],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapExactPtForToken: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtIn: BigNumberish,
      output: TokenOutputStruct,
      limit: LimitOrderDataStruct
    ],
    [
      [bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyFee: bigint;
        netSyInterm: bigint;
      }
    ],
    "nonpayable"
  >;

  swapExactSyForPt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactSyIn: BigNumberish,
      minPtOut: BigNumberish,
      guessPtOut: ApproxParamsStruct,
      limit: LimitOrderDataStruct
    ],
    [[bigint, bigint] & { netPtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapExactTokenForPt: TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      minPtOut: BigNumberish,
      guessPtOut: ApproxParamsStruct,
      input: TokenInputStruct,
      limit: LimitOrderDataStruct
    ],
    [
      [bigint, bigint, bigint] & {
        netPtOut: bigint;
        netSyFee: bigint;
        netSyInterm: bigint;
      }
    ],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "swapExactPtForSy"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtIn: BigNumberish,
      minSyOut: BigNumberish,
      limit: LimitOrderDataStruct
    ],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactPtForToken"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactPtIn: BigNumberish,
      output: TokenOutputStruct,
      limit: LimitOrderDataStruct
    ],
    [
      [bigint, bigint, bigint] & {
        netTokenOut: bigint;
        netSyFee: bigint;
        netSyInterm: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactSyForPt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      exactSyIn: BigNumberish,
      minPtOut: BigNumberish,
      guessPtOut: ApproxParamsStruct,
      limit: LimitOrderDataStruct
    ],
    [[bigint, bigint] & { netPtOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokenForPt"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      market: AddressLike,
      minPtOut: BigNumberish,
      guessPtOut: ApproxParamsStruct,
      input: TokenInputStruct,
      limit: LimitOrderDataStruct
    ],
    [
      [bigint, bigint, bigint] & {
        netPtOut: bigint;
        netSyFee: bigint;
        netSyInterm: bigint;
      }
    ],
    "payable"
  >;

  getEvent(
    key: "AddLiquidityDualSyAndPt"
  ): TypedContractEvent<
    AddLiquidityDualSyAndPtEvent.InputTuple,
    AddLiquidityDualSyAndPtEvent.OutputTuple,
    AddLiquidityDualSyAndPtEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquidityDualTokenAndPt"
  ): TypedContractEvent<
    AddLiquidityDualTokenAndPtEvent.InputTuple,
    AddLiquidityDualTokenAndPtEvent.OutputTuple,
    AddLiquidityDualTokenAndPtEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySinglePt"
  ): TypedContractEvent<
    AddLiquiditySinglePtEvent.InputTuple,
    AddLiquiditySinglePtEvent.OutputTuple,
    AddLiquiditySinglePtEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySingleSy"
  ): TypedContractEvent<
    AddLiquiditySingleSyEvent.InputTuple,
    AddLiquiditySingleSyEvent.OutputTuple,
    AddLiquiditySingleSyEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySingleSyKeepYt"
  ): TypedContractEvent<
    AddLiquiditySingleSyKeepYtEvent.InputTuple,
    AddLiquiditySingleSyKeepYtEvent.OutputTuple,
    AddLiquiditySingleSyKeepYtEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySingleToken"
  ): TypedContractEvent<
    AddLiquiditySingleTokenEvent.InputTuple,
    AddLiquiditySingleTokenEvent.OutputTuple,
    AddLiquiditySingleTokenEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquiditySingleTokenKeepYt"
  ): TypedContractEvent<
    AddLiquiditySingleTokenKeepYtEvent.InputTuple,
    AddLiquiditySingleTokenKeepYtEvent.OutputTuple,
    AddLiquiditySingleTokenKeepYtEvent.OutputObject
  >;
  getEvent(
    key: "ExitPostExpToSy"
  ): TypedContractEvent<
    ExitPostExpToSyEvent.InputTuple,
    ExitPostExpToSyEvent.OutputTuple,
    ExitPostExpToSyEvent.OutputObject
  >;
  getEvent(
    key: "ExitPostExpToToken"
  ): TypedContractEvent<
    ExitPostExpToTokenEvent.InputTuple,
    ExitPostExpToTokenEvent.OutputTuple,
    ExitPostExpToTokenEvent.OutputObject
  >;
  getEvent(
    key: "ExitPreExpToSy"
  ): TypedContractEvent<
    ExitPreExpToSyEvent.InputTuple,
    ExitPreExpToSyEvent.OutputTuple,
    ExitPreExpToSyEvent.OutputObject
  >;
  getEvent(
    key: "ExitPreExpToToken"
  ): TypedContractEvent<
    ExitPreExpToTokenEvent.InputTuple,
    ExitPreExpToTokenEvent.OutputTuple,
    ExitPreExpToTokenEvent.OutputObject
  >;
  getEvent(
    key: "MintPyFromSy"
  ): TypedContractEvent<
    MintPyFromSyEvent.InputTuple,
    MintPyFromSyEvent.OutputTuple,
    MintPyFromSyEvent.OutputObject
  >;
  getEvent(
    key: "MintPyFromToken"
  ): TypedContractEvent<
    MintPyFromTokenEvent.InputTuple,
    MintPyFromTokenEvent.OutputTuple,
    MintPyFromTokenEvent.OutputObject
  >;
  getEvent(
    key: "MintSyFromToken"
  ): TypedContractEvent<
    MintSyFromTokenEvent.InputTuple,
    MintSyFromTokenEvent.OutputTuple,
    MintSyFromTokenEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RedeemPyToSy"
  ): TypedContractEvent<
    RedeemPyToSyEvent.InputTuple,
    RedeemPyToSyEvent.OutputTuple,
    RedeemPyToSyEvent.OutputObject
  >;
  getEvent(
    key: "RedeemPyToToken"
  ): TypedContractEvent<
    RedeemPyToTokenEvent.InputTuple,
    RedeemPyToTokenEvent.OutputTuple,
    RedeemPyToTokenEvent.OutputObject
  >;
  getEvent(
    key: "RedeemSyToToken"
  ): TypedContractEvent<
    RedeemSyToTokenEvent.InputTuple,
    RedeemSyToTokenEvent.OutputTuple,
    RedeemSyToTokenEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidityDualSyAndPt"
  ): TypedContractEvent<
    RemoveLiquidityDualSyAndPtEvent.InputTuple,
    RemoveLiquidityDualSyAndPtEvent.OutputTuple,
    RemoveLiquidityDualSyAndPtEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidityDualTokenAndPt"
  ): TypedContractEvent<
    RemoveLiquidityDualTokenAndPtEvent.InputTuple,
    RemoveLiquidityDualTokenAndPtEvent.OutputTuple,
    RemoveLiquidityDualTokenAndPtEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquiditySinglePt"
  ): TypedContractEvent<
    RemoveLiquiditySinglePtEvent.InputTuple,
    RemoveLiquiditySinglePtEvent.OutputTuple,
    RemoveLiquiditySinglePtEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquiditySingleSy"
  ): TypedContractEvent<
    RemoveLiquiditySingleSyEvent.InputTuple,
    RemoveLiquiditySingleSyEvent.OutputTuple,
    RemoveLiquiditySingleSyEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquiditySingleToken"
  ): TypedContractEvent<
    RemoveLiquiditySingleTokenEvent.InputTuple,
    RemoveLiquiditySingleTokenEvent.OutputTuple,
    RemoveLiquiditySingleTokenEvent.OutputObject
  >;
  getEvent(
    key: "SelectorToFacetSet"
  ): TypedContractEvent<
    SelectorToFacetSetEvent.InputTuple,
    SelectorToFacetSetEvent.OutputTuple,
    SelectorToFacetSetEvent.OutputObject
  >;
  getEvent(
    key: "SwapPtAndSy"
  ): TypedContractEvent<
    SwapPtAndSyEvent.InputTuple,
    SwapPtAndSyEvent.OutputTuple,
    SwapPtAndSyEvent.OutputObject
  >;
  getEvent(
    key: "SwapPtAndToken"
  ): TypedContractEvent<
    SwapPtAndTokenEvent.InputTuple,
    SwapPtAndTokenEvent.OutputTuple,
    SwapPtAndTokenEvent.OutputObject
  >;
  getEvent(
    key: "SwapYtAndSy"
  ): TypedContractEvent<
    SwapYtAndSyEvent.InputTuple,
    SwapYtAndSyEvent.OutputTuple,
    SwapYtAndSyEvent.OutputObject
  >;
  getEvent(
    key: "SwapYtAndToken"
  ): TypedContractEvent<
    SwapYtAndTokenEvent.InputTuple,
    SwapYtAndTokenEvent.OutputTuple,
    SwapYtAndTokenEvent.OutputObject
  >;

  filters: {
    "AddLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquidityDualSyAndPtEvent.InputTuple,
      AddLiquidityDualSyAndPtEvent.OutputTuple,
      AddLiquidityDualSyAndPtEvent.OutputObject
    >;
    AddLiquidityDualSyAndPt: TypedContractEvent<
      AddLiquidityDualSyAndPtEvent.InputTuple,
      AddLiquidityDualSyAndPtEvent.OutputTuple,
      AddLiquidityDualSyAndPtEvent.OutputObject
    >;

    "AddLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquidityDualTokenAndPtEvent.InputTuple,
      AddLiquidityDualTokenAndPtEvent.OutputTuple,
      AddLiquidityDualTokenAndPtEvent.OutputObject
    >;
    AddLiquidityDualTokenAndPt: TypedContractEvent<
      AddLiquidityDualTokenAndPtEvent.InputTuple,
      AddLiquidityDualTokenAndPtEvent.OutputTuple,
      AddLiquidityDualTokenAndPtEvent.OutputObject
    >;

    "AddLiquiditySinglePt(address,address,address,uint256,uint256)": TypedContractEvent<
      AddLiquiditySinglePtEvent.InputTuple,
      AddLiquiditySinglePtEvent.OutputTuple,
      AddLiquiditySinglePtEvent.OutputObject
    >;
    AddLiquiditySinglePt: TypedContractEvent<
      AddLiquiditySinglePtEvent.InputTuple,
      AddLiquiditySinglePtEvent.OutputTuple,
      AddLiquiditySinglePtEvent.OutputObject
    >;

    "AddLiquiditySingleSy(address,address,address,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleSyEvent.InputTuple,
      AddLiquiditySingleSyEvent.OutputTuple,
      AddLiquiditySingleSyEvent.OutputObject
    >;
    AddLiquiditySingleSy: TypedContractEvent<
      AddLiquiditySingleSyEvent.InputTuple,
      AddLiquiditySingleSyEvent.OutputTuple,
      AddLiquiditySingleSyEvent.OutputObject
    >;

    "AddLiquiditySingleSyKeepYt(address,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleSyKeepYtEvent.InputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputObject
    >;
    AddLiquiditySingleSyKeepYt: TypedContractEvent<
      AddLiquiditySingleSyKeepYtEvent.InputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputTuple,
      AddLiquiditySingleSyKeepYtEvent.OutputObject
    >;

    "AddLiquiditySingleToken(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleTokenEvent.InputTuple,
      AddLiquiditySingleTokenEvent.OutputTuple,
      AddLiquiditySingleTokenEvent.OutputObject
    >;
    AddLiquiditySingleToken: TypedContractEvent<
      AddLiquiditySingleTokenEvent.InputTuple,
      AddLiquiditySingleTokenEvent.OutputTuple,
      AddLiquiditySingleTokenEvent.OutputObject
    >;

    "AddLiquiditySingleTokenKeepYt(address,address,address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AddLiquiditySingleTokenKeepYtEvent.InputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputObject
    >;
    AddLiquiditySingleTokenKeepYt: TypedContractEvent<
      AddLiquiditySingleTokenKeepYtEvent.InputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputTuple,
      AddLiquiditySingleTokenKeepYtEvent.OutputObject
    >;

    "ExitPostExpToSy(address,address,address,uint256,tuple)": TypedContractEvent<
      ExitPostExpToSyEvent.InputTuple,
      ExitPostExpToSyEvent.OutputTuple,
      ExitPostExpToSyEvent.OutputObject
    >;
    ExitPostExpToSy: TypedContractEvent<
      ExitPostExpToSyEvent.InputTuple,
      ExitPostExpToSyEvent.OutputTuple,
      ExitPostExpToSyEvent.OutputObject
    >;

    "ExitPostExpToToken(address,address,address,address,uint256,uint256,tuple)": TypedContractEvent<
      ExitPostExpToTokenEvent.InputTuple,
      ExitPostExpToTokenEvent.OutputTuple,
      ExitPostExpToTokenEvent.OutputObject
    >;
    ExitPostExpToToken: TypedContractEvent<
      ExitPostExpToTokenEvent.InputTuple,
      ExitPostExpToTokenEvent.OutputTuple,
      ExitPostExpToTokenEvent.OutputObject
    >;

    "ExitPreExpToSy(address,address,address,uint256,tuple)": TypedContractEvent<
      ExitPreExpToSyEvent.InputTuple,
      ExitPreExpToSyEvent.OutputTuple,
      ExitPreExpToSyEvent.OutputObject
    >;
    ExitPreExpToSy: TypedContractEvent<
      ExitPreExpToSyEvent.InputTuple,
      ExitPreExpToSyEvent.OutputTuple,
      ExitPreExpToSyEvent.OutputObject
    >;

    "ExitPreExpToToken(address,address,address,address,uint256,uint256,tuple)": TypedContractEvent<
      ExitPreExpToTokenEvent.InputTuple,
      ExitPreExpToTokenEvent.OutputTuple,
      ExitPreExpToTokenEvent.OutputObject
    >;
    ExitPreExpToToken: TypedContractEvent<
      ExitPreExpToTokenEvent.InputTuple,
      ExitPreExpToTokenEvent.OutputTuple,
      ExitPreExpToTokenEvent.OutputObject
    >;

    "MintPyFromSy(address,address,address,uint256,uint256)": TypedContractEvent<
      MintPyFromSyEvent.InputTuple,
      MintPyFromSyEvent.OutputTuple,
      MintPyFromSyEvent.OutputObject
    >;
    MintPyFromSy: TypedContractEvent<
      MintPyFromSyEvent.InputTuple,
      MintPyFromSyEvent.OutputTuple,
      MintPyFromSyEvent.OutputObject
    >;

    "MintPyFromToken(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      MintPyFromTokenEvent.InputTuple,
      MintPyFromTokenEvent.OutputTuple,
      MintPyFromTokenEvent.OutputObject
    >;
    MintPyFromToken: TypedContractEvent<
      MintPyFromTokenEvent.InputTuple,
      MintPyFromTokenEvent.OutputTuple,
      MintPyFromTokenEvent.OutputObject
    >;

    "MintSyFromToken(address,address,address,address,uint256,uint256)": TypedContractEvent<
      MintSyFromTokenEvent.InputTuple,
      MintSyFromTokenEvent.OutputTuple,
      MintSyFromTokenEvent.OutputObject
    >;
    MintSyFromToken: TypedContractEvent<
      MintSyFromTokenEvent.InputTuple,
      MintSyFromTokenEvent.OutputTuple,
      MintSyFromTokenEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RedeemPyToSy(address,address,address,uint256,uint256)": TypedContractEvent<
      RedeemPyToSyEvent.InputTuple,
      RedeemPyToSyEvent.OutputTuple,
      RedeemPyToSyEvent.OutputObject
    >;
    RedeemPyToSy: TypedContractEvent<
      RedeemPyToSyEvent.InputTuple,
      RedeemPyToSyEvent.OutputTuple,
      RedeemPyToSyEvent.OutputObject
    >;

    "RedeemPyToToken(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      RedeemPyToTokenEvent.InputTuple,
      RedeemPyToTokenEvent.OutputTuple,
      RedeemPyToTokenEvent.OutputObject
    >;
    RedeemPyToToken: TypedContractEvent<
      RedeemPyToTokenEvent.InputTuple,
      RedeemPyToTokenEvent.OutputTuple,
      RedeemPyToTokenEvent.OutputObject
    >;

    "RedeemSyToToken(address,address,address,address,uint256,uint256)": TypedContractEvent<
      RedeemSyToTokenEvent.InputTuple,
      RedeemSyToTokenEvent.OutputTuple,
      RedeemSyToTokenEvent.OutputObject
    >;
    RedeemSyToToken: TypedContractEvent<
      RedeemSyToTokenEvent.InputTuple,
      RedeemSyToTokenEvent.OutputTuple,
      RedeemSyToTokenEvent.OutputObject
    >;

    "RemoveLiquidityDualSyAndPt(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      RemoveLiquidityDualSyAndPtEvent.InputTuple,
      RemoveLiquidityDualSyAndPtEvent.OutputTuple,
      RemoveLiquidityDualSyAndPtEvent.OutputObject
    >;
    RemoveLiquidityDualSyAndPt: TypedContractEvent<
      RemoveLiquidityDualSyAndPtEvent.InputTuple,
      RemoveLiquidityDualSyAndPtEvent.OutputTuple,
      RemoveLiquidityDualSyAndPtEvent.OutputObject
    >;

    "RemoveLiquidityDualTokenAndPt(address,address,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RemoveLiquidityDualTokenAndPtEvent.InputTuple,
      RemoveLiquidityDualTokenAndPtEvent.OutputTuple,
      RemoveLiquidityDualTokenAndPtEvent.OutputObject
    >;
    RemoveLiquidityDualTokenAndPt: TypedContractEvent<
      RemoveLiquidityDualTokenAndPtEvent.InputTuple,
      RemoveLiquidityDualTokenAndPtEvent.OutputTuple,
      RemoveLiquidityDualTokenAndPtEvent.OutputObject
    >;

    "RemoveLiquiditySinglePt(address,address,address,uint256,uint256)": TypedContractEvent<
      RemoveLiquiditySinglePtEvent.InputTuple,
      RemoveLiquiditySinglePtEvent.OutputTuple,
      RemoveLiquiditySinglePtEvent.OutputObject
    >;
    RemoveLiquiditySinglePt: TypedContractEvent<
      RemoveLiquiditySinglePtEvent.InputTuple,
      RemoveLiquiditySinglePtEvent.OutputTuple,
      RemoveLiquiditySinglePtEvent.OutputObject
    >;

    "RemoveLiquiditySingleSy(address,address,address,uint256,uint256)": TypedContractEvent<
      RemoveLiquiditySingleSyEvent.InputTuple,
      RemoveLiquiditySingleSyEvent.OutputTuple,
      RemoveLiquiditySingleSyEvent.OutputObject
    >;
    RemoveLiquiditySingleSy: TypedContractEvent<
      RemoveLiquiditySingleSyEvent.InputTuple,
      RemoveLiquiditySingleSyEvent.OutputTuple,
      RemoveLiquiditySingleSyEvent.OutputObject
    >;

    "RemoveLiquiditySingleToken(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      RemoveLiquiditySingleTokenEvent.InputTuple,
      RemoveLiquiditySingleTokenEvent.OutputTuple,
      RemoveLiquiditySingleTokenEvent.OutputObject
    >;
    RemoveLiquiditySingleToken: TypedContractEvent<
      RemoveLiquiditySingleTokenEvent.InputTuple,
      RemoveLiquiditySingleTokenEvent.OutputTuple,
      RemoveLiquiditySingleTokenEvent.OutputObject
    >;

    "SelectorToFacetSet(bytes4,address)": TypedContractEvent<
      SelectorToFacetSetEvent.InputTuple,
      SelectorToFacetSetEvent.OutputTuple,
      SelectorToFacetSetEvent.OutputObject
    >;
    SelectorToFacetSet: TypedContractEvent<
      SelectorToFacetSetEvent.InputTuple,
      SelectorToFacetSetEvent.OutputTuple,
      SelectorToFacetSetEvent.OutputObject
    >;

    "SwapPtAndSy(address,address,address,int256,int256)": TypedContractEvent<
      SwapPtAndSyEvent.InputTuple,
      SwapPtAndSyEvent.OutputTuple,
      SwapPtAndSyEvent.OutputObject
    >;
    SwapPtAndSy: TypedContractEvent<
      SwapPtAndSyEvent.InputTuple,
      SwapPtAndSyEvent.OutputTuple,
      SwapPtAndSyEvent.OutputObject
    >;

    "SwapPtAndToken(address,address,address,address,int256,int256,uint256)": TypedContractEvent<
      SwapPtAndTokenEvent.InputTuple,
      SwapPtAndTokenEvent.OutputTuple,
      SwapPtAndTokenEvent.OutputObject
    >;
    SwapPtAndToken: TypedContractEvent<
      SwapPtAndTokenEvent.InputTuple,
      SwapPtAndTokenEvent.OutputTuple,
      SwapPtAndTokenEvent.OutputObject
    >;

    "SwapYtAndSy(address,address,address,int256,int256)": TypedContractEvent<
      SwapYtAndSyEvent.InputTuple,
      SwapYtAndSyEvent.OutputTuple,
      SwapYtAndSyEvent.OutputObject
    >;
    SwapYtAndSy: TypedContractEvent<
      SwapYtAndSyEvent.InputTuple,
      SwapYtAndSyEvent.OutputTuple,
      SwapYtAndSyEvent.OutputObject
    >;

    "SwapYtAndToken(address,address,address,address,int256,int256,uint256)": TypedContractEvent<
      SwapYtAndTokenEvent.InputTuple,
      SwapYtAndTokenEvent.OutputTuple,
      SwapYtAndTokenEvent.OutputObject
    >;
    SwapYtAndToken: TypedContractEvent<
      SwapYtAndTokenEvent.InputTuple,
      SwapYtAndTokenEvent.OutputTuple,
      SwapYtAndTokenEvent.OutputObject
    >;
  };
}
