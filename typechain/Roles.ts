/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type ConditionFlatStruct = {
  parent: BigNumberish;
  paramType: BigNumberish;
  operator: BigNumberish;
  compValue: BytesLike;
};

export type ConditionFlatStructOutput = [
  parent: bigint,
  paramType: bigint,
  operator: bigint,
  compValue: string
] & { parent: bigint; paramType: bigint; operator: bigint; compValue: string };

export interface RolesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowFunction"
      | "allowTarget"
      | "allowances"
      | "assignRoles"
      | "avatar"
      | "consumed"
      | "defaultRoles"
      | "disableModule"
      | "enableModule"
      | "execTransactionFromModule"
      | "execTransactionFromModuleReturnData"
      | "execTransactionWithRole"
      | "execTransactionWithRoleReturnData"
      | "getModulesPaginated"
      | "invalidate"
      | "isModuleEnabled"
      | "moduleTxHash"
      | "owner"
      | "renounceOwnership"
      | "revokeFunction"
      | "revokeTarget"
      | "scopeFunction"
      | "scopeTarget"
      | "setAllowance"
      | "setAvatar"
      | "setDefaultRole"
      | "setTarget"
      | "setTransactionUnwrapper"
      | "setUp"
      | "target"
      | "transferOwnership"
      | "unwrappers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllowFunction"
      | "AllowTarget"
      | "AssignRoles"
      | "AvatarSet"
      | "ConsumeAllowance"
      | "DisabledModule"
      | "EnabledModule"
      | "ExecutionFromModuleFailure"
      | "ExecutionFromModuleSuccess"
      | "HashExecuted"
      | "HashInvalidated"
      | "Initialized"
      | "OwnershipTransferred"
      | "RevokeFunction"
      | "RevokeTarget"
      | "RolesModSetup"
      | "ScopeFunction"
      | "ScopeTarget"
      | "SetAllowance"
      | "SetDefaultRole"
      | "SetUnwrapAdapter"
      | "TargetSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowFunction",
    values: [BytesLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowTarget",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowances",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignRoles",
    values: [AddressLike, BytesLike[], boolean[]]
  ): string;
  encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "consumed",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultRoles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionWithRole",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionWithRoleReturnData",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleEnabled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleTxHash",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeFunction",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeTarget",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeFunction",
    values: [
      BytesLike,
      AddressLike,
      BytesLike,
      ConditionFlatStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeTarget",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowance",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatar",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRole",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTarget",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransactionUnwrapper",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrappers",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assignRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "consumed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionWithRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionWithRoleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invalidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moduleTxHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTransactionUnwrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unwrappers", data: BytesLike): Result;
}

export namespace AllowFunctionEvent {
  export type InputTuple = [
    roleKey: BytesLike,
    targetAddress: AddressLike,
    selector: BytesLike,
    options: BigNumberish
  ];
  export type OutputTuple = [
    roleKey: string,
    targetAddress: string,
    selector: string,
    options: bigint
  ];
  export interface OutputObject {
    roleKey: string;
    targetAddress: string;
    selector: string;
    options: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowTargetEvent {
  export type InputTuple = [
    roleKey: BytesLike,
    targetAddress: AddressLike,
    options: BigNumberish
  ];
  export type OutputTuple = [
    roleKey: string,
    targetAddress: string,
    options: bigint
  ];
  export interface OutputObject {
    roleKey: string;
    targetAddress: string;
    options: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssignRolesEvent {
  export type InputTuple = [
    module: AddressLike,
    roleKeys: BytesLike[],
    memberOf: boolean[]
  ];
  export type OutputTuple = [
    module: string,
    roleKeys: string[],
    memberOf: boolean[]
  ];
  export interface OutputObject {
    module: string;
    roleKeys: string[];
    memberOf: boolean[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AvatarSetEvent {
  export type InputTuple = [
    previousAvatar: AddressLike,
    newAvatar: AddressLike
  ];
  export type OutputTuple = [previousAvatar: string, newAvatar: string];
  export interface OutputObject {
    previousAvatar: string;
    newAvatar: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsumeAllowanceEvent {
  export type InputTuple = [
    allowanceKey: BytesLike,
    consumed: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    allowanceKey: string,
    consumed: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    allowanceKey: string;
    consumed: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisabledModuleEvent {
  export type InputTuple = [module: AddressLike];
  export type OutputTuple = [module: string];
  export interface OutputObject {
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnabledModuleEvent {
  export type InputTuple = [module: AddressLike];
  export type OutputTuple = [module: string];
  export interface OutputObject {
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionFromModuleFailureEvent {
  export type InputTuple = [module: AddressLike];
  export type OutputTuple = [module: string];
  export interface OutputObject {
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionFromModuleSuccessEvent {
  export type InputTuple = [module: AddressLike];
  export type OutputTuple = [module: string];
  export interface OutputObject {
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HashExecutedEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HashInvalidatedEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeFunctionEvent {
  export type InputTuple = [
    roleKey: BytesLike,
    targetAddress: AddressLike,
    selector: BytesLike
  ];
  export type OutputTuple = [
    roleKey: string,
    targetAddress: string,
    selector: string
  ];
  export interface OutputObject {
    roleKey: string;
    targetAddress: string;
    selector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeTargetEvent {
  export type InputTuple = [roleKey: BytesLike, targetAddress: AddressLike];
  export type OutputTuple = [roleKey: string, targetAddress: string];
  export interface OutputObject {
    roleKey: string;
    targetAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RolesModSetupEvent {
  export type InputTuple = [
    initiator: AddressLike,
    owner: AddressLike,
    avatar: AddressLike,
    target: AddressLike
  ];
  export type OutputTuple = [
    initiator: string,
    owner: string,
    avatar: string,
    target: string
  ];
  export interface OutputObject {
    initiator: string;
    owner: string;
    avatar: string;
    target: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScopeFunctionEvent {
  export type InputTuple = [
    roleKey: BytesLike,
    targetAddress: AddressLike,
    selector: BytesLike,
    conditions: ConditionFlatStruct[],
    options: BigNumberish
  ];
  export type OutputTuple = [
    roleKey: string,
    targetAddress: string,
    selector: string,
    conditions: ConditionFlatStructOutput[],
    options: bigint
  ];
  export interface OutputObject {
    roleKey: string;
    targetAddress: string;
    selector: string;
    conditions: ConditionFlatStructOutput[];
    options: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScopeTargetEvent {
  export type InputTuple = [roleKey: BytesLike, targetAddress: AddressLike];
  export type OutputTuple = [roleKey: string, targetAddress: string];
  export interface OutputObject {
    roleKey: string;
    targetAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAllowanceEvent {
  export type InputTuple = [
    allowanceKey: BytesLike,
    balance: BigNumberish,
    maxRefill: BigNumberish,
    refill: BigNumberish,
    period: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    allowanceKey: string,
    balance: bigint,
    maxRefill: bigint,
    refill: bigint,
    period: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    allowanceKey: string;
    balance: bigint;
    maxRefill: bigint;
    refill: bigint;
    period: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDefaultRoleEvent {
  export type InputTuple = [module: AddressLike, defaultRoleKey: BytesLike];
  export type OutputTuple = [module: string, defaultRoleKey: string];
  export interface OutputObject {
    module: string;
    defaultRoleKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUnwrapAdapterEvent {
  export type InputTuple = [
    to: AddressLike,
    selector: BytesLike,
    adapter: AddressLike
  ];
  export type OutputTuple = [to: string, selector: string, adapter: string];
  export interface OutputObject {
    to: string;
    selector: string;
    adapter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TargetSetEvent {
  export type InputTuple = [
    previousTarget: AddressLike,
    newTarget: AddressLike
  ];
  export type OutputTuple = [previousTarget: string, newTarget: string];
  export interface OutputObject {
    previousTarget: string;
    newTarget: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Roles extends BaseContract {
  connect(runner?: ContractRunner | null): Roles;
  waitForDeployment(): Promise<this>;

  interface: RolesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowFunction: TypedContractMethod<
    [
      roleKey: BytesLike,
      targetAddress: AddressLike,
      selector: BytesLike,
      options: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  allowTarget: TypedContractMethod<
    [roleKey: BytesLike, targetAddress: AddressLike, options: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowances: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        refill: bigint;
        maxRefill: bigint;
        period: bigint;
        balance: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  assignRoles: TypedContractMethod<
    [module: AddressLike, roleKeys: BytesLike[], memberOf: boolean[]],
    [void],
    "nonpayable"
  >;

  avatar: TypedContractMethod<[], [string], "view">;

  consumed: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  defaultRoles: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  disableModule: TypedContractMethod<
    [prevModule: AddressLike, module: AddressLike],
    [void],
    "nonpayable"
  >;

  enableModule: TypedContractMethod<
    [module: AddressLike],
    [void],
    "nonpayable"
  >;

  execTransactionFromModule: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  execTransactionFromModuleReturnData: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;

  execTransactionWithRole: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      roleKey: BytesLike,
      shouldRevert: boolean
    ],
    [boolean],
    "nonpayable"
  >;

  execTransactionWithRoleReturnData: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      roleKey: BytesLike,
      shouldRevert: boolean
    ],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;

  getModulesPaginated: TypedContractMethod<
    [start: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;

  invalidate: TypedContractMethod<[hash: BytesLike], [void], "nonpayable">;

  isModuleEnabled: TypedContractMethod<
    [_module: AddressLike],
    [boolean],
    "view"
  >;

  moduleTxHash: TypedContractMethod<
    [data: BytesLike, salt: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeFunction: TypedContractMethod<
    [roleKey: BytesLike, targetAddress: AddressLike, selector: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeTarget: TypedContractMethod<
    [roleKey: BytesLike, targetAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  scopeFunction: TypedContractMethod<
    [
      roleKey: BytesLike,
      targetAddress: AddressLike,
      selector: BytesLike,
      conditions: ConditionFlatStruct[],
      options: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  scopeTarget: TypedContractMethod<
    [roleKey: BytesLike, targetAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setAllowance: TypedContractMethod<
    [
      key: BytesLike,
      balance: BigNumberish,
      maxRefill: BigNumberish,
      refill: BigNumberish,
      period: BigNumberish,
      timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setAvatar: TypedContractMethod<[_avatar: AddressLike], [void], "nonpayable">;

  setDefaultRole: TypedContractMethod<
    [module: AddressLike, roleKey: BytesLike],
    [void],
    "nonpayable"
  >;

  setTarget: TypedContractMethod<[_target: AddressLike], [void], "nonpayable">;

  setTransactionUnwrapper: TypedContractMethod<
    [to: AddressLike, selector: BytesLike, adapter: AddressLike],
    [void],
    "nonpayable"
  >;

  setUp: TypedContractMethod<[initParams: BytesLike], [void], "nonpayable">;

  target: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unwrappers: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowFunction"
  ): TypedContractMethod<
    [
      roleKey: BytesLike,
      targetAddress: AddressLike,
      selector: BytesLike,
      options: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowTarget"
  ): TypedContractMethod<
    [roleKey: BytesLike, targetAddress: AddressLike, options: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowances"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        refill: bigint;
        maxRefill: bigint;
        period: bigint;
        balance: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "assignRoles"
  ): TypedContractMethod<
    [module: AddressLike, roleKeys: BytesLike[], memberOf: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "avatar"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "consumed"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "defaultRoles"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "disableModule"
  ): TypedContractMethod<
    [prevModule: AddressLike, module: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableModule"
  ): TypedContractMethod<[module: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "execTransactionFromModule"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execTransactionFromModuleReturnData"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execTransactionWithRole"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      roleKey: BytesLike,
      shouldRevert: boolean
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execTransactionWithRoleReturnData"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      roleKey: BytesLike,
      shouldRevert: boolean
    ],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getModulesPaginated"
  ): TypedContractMethod<
    [start: AddressLike, pageSize: BigNumberish],
    [[string[], string] & { array: string[]; next: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "invalidate"
  ): TypedContractMethod<[hash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isModuleEnabled"
  ): TypedContractMethod<[_module: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "moduleTxHash"
  ): TypedContractMethod<[data: BytesLike, salt: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeFunction"
  ): TypedContractMethod<
    [roleKey: BytesLike, targetAddress: AddressLike, selector: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeTarget"
  ): TypedContractMethod<
    [roleKey: BytesLike, targetAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "scopeFunction"
  ): TypedContractMethod<
    [
      roleKey: BytesLike,
      targetAddress: AddressLike,
      selector: BytesLike,
      conditions: ConditionFlatStruct[],
      options: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "scopeTarget"
  ): TypedContractMethod<
    [roleKey: BytesLike, targetAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowance"
  ): TypedContractMethod<
    [
      key: BytesLike,
      balance: BigNumberish,
      maxRefill: BigNumberish,
      refill: BigNumberish,
      period: BigNumberish,
      timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAvatar"
  ): TypedContractMethod<[_avatar: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultRole"
  ): TypedContractMethod<
    [module: AddressLike, roleKey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTarget"
  ): TypedContractMethod<[_target: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransactionUnwrapper"
  ): TypedContractMethod<
    [to: AddressLike, selector: BytesLike, adapter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUp"
  ): TypedContractMethod<[initParams: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "target"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unwrappers"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getEvent(
    key: "AllowFunction"
  ): TypedContractEvent<
    AllowFunctionEvent.InputTuple,
    AllowFunctionEvent.OutputTuple,
    AllowFunctionEvent.OutputObject
  >;
  getEvent(
    key: "AllowTarget"
  ): TypedContractEvent<
    AllowTargetEvent.InputTuple,
    AllowTargetEvent.OutputTuple,
    AllowTargetEvent.OutputObject
  >;
  getEvent(
    key: "AssignRoles"
  ): TypedContractEvent<
    AssignRolesEvent.InputTuple,
    AssignRolesEvent.OutputTuple,
    AssignRolesEvent.OutputObject
  >;
  getEvent(
    key: "AvatarSet"
  ): TypedContractEvent<
    AvatarSetEvent.InputTuple,
    AvatarSetEvent.OutputTuple,
    AvatarSetEvent.OutputObject
  >;
  getEvent(
    key: "ConsumeAllowance"
  ): TypedContractEvent<
    ConsumeAllowanceEvent.InputTuple,
    ConsumeAllowanceEvent.OutputTuple,
    ConsumeAllowanceEvent.OutputObject
  >;
  getEvent(
    key: "DisabledModule"
  ): TypedContractEvent<
    DisabledModuleEvent.InputTuple,
    DisabledModuleEvent.OutputTuple,
    DisabledModuleEvent.OutputObject
  >;
  getEvent(
    key: "EnabledModule"
  ): TypedContractEvent<
    EnabledModuleEvent.InputTuple,
    EnabledModuleEvent.OutputTuple,
    EnabledModuleEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionFromModuleFailure"
  ): TypedContractEvent<
    ExecutionFromModuleFailureEvent.InputTuple,
    ExecutionFromModuleFailureEvent.OutputTuple,
    ExecutionFromModuleFailureEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionFromModuleSuccess"
  ): TypedContractEvent<
    ExecutionFromModuleSuccessEvent.InputTuple,
    ExecutionFromModuleSuccessEvent.OutputTuple,
    ExecutionFromModuleSuccessEvent.OutputObject
  >;
  getEvent(
    key: "HashExecuted"
  ): TypedContractEvent<
    HashExecutedEvent.InputTuple,
    HashExecutedEvent.OutputTuple,
    HashExecutedEvent.OutputObject
  >;
  getEvent(
    key: "HashInvalidated"
  ): TypedContractEvent<
    HashInvalidatedEvent.InputTuple,
    HashInvalidatedEvent.OutputTuple,
    HashInvalidatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RevokeFunction"
  ): TypedContractEvent<
    RevokeFunctionEvent.InputTuple,
    RevokeFunctionEvent.OutputTuple,
    RevokeFunctionEvent.OutputObject
  >;
  getEvent(
    key: "RevokeTarget"
  ): TypedContractEvent<
    RevokeTargetEvent.InputTuple,
    RevokeTargetEvent.OutputTuple,
    RevokeTargetEvent.OutputObject
  >;
  getEvent(
    key: "RolesModSetup"
  ): TypedContractEvent<
    RolesModSetupEvent.InputTuple,
    RolesModSetupEvent.OutputTuple,
    RolesModSetupEvent.OutputObject
  >;
  getEvent(
    key: "ScopeFunction"
  ): TypedContractEvent<
    ScopeFunctionEvent.InputTuple,
    ScopeFunctionEvent.OutputTuple,
    ScopeFunctionEvent.OutputObject
  >;
  getEvent(
    key: "ScopeTarget"
  ): TypedContractEvent<
    ScopeTargetEvent.InputTuple,
    ScopeTargetEvent.OutputTuple,
    ScopeTargetEvent.OutputObject
  >;
  getEvent(
    key: "SetAllowance"
  ): TypedContractEvent<
    SetAllowanceEvent.InputTuple,
    SetAllowanceEvent.OutputTuple,
    SetAllowanceEvent.OutputObject
  >;
  getEvent(
    key: "SetDefaultRole"
  ): TypedContractEvent<
    SetDefaultRoleEvent.InputTuple,
    SetDefaultRoleEvent.OutputTuple,
    SetDefaultRoleEvent.OutputObject
  >;
  getEvent(
    key: "SetUnwrapAdapter"
  ): TypedContractEvent<
    SetUnwrapAdapterEvent.InputTuple,
    SetUnwrapAdapterEvent.OutputTuple,
    SetUnwrapAdapterEvent.OutputObject
  >;
  getEvent(
    key: "TargetSet"
  ): TypedContractEvent<
    TargetSetEvent.InputTuple,
    TargetSetEvent.OutputTuple,
    TargetSetEvent.OutputObject
  >;

  filters: {
    "AllowFunction(bytes32,address,bytes4,uint8)": TypedContractEvent<
      AllowFunctionEvent.InputTuple,
      AllowFunctionEvent.OutputTuple,
      AllowFunctionEvent.OutputObject
    >;
    AllowFunction: TypedContractEvent<
      AllowFunctionEvent.InputTuple,
      AllowFunctionEvent.OutputTuple,
      AllowFunctionEvent.OutputObject
    >;

    "AllowTarget(bytes32,address,uint8)": TypedContractEvent<
      AllowTargetEvent.InputTuple,
      AllowTargetEvent.OutputTuple,
      AllowTargetEvent.OutputObject
    >;
    AllowTarget: TypedContractEvent<
      AllowTargetEvent.InputTuple,
      AllowTargetEvent.OutputTuple,
      AllowTargetEvent.OutputObject
    >;

    "AssignRoles(address,bytes32[],bool[])": TypedContractEvent<
      AssignRolesEvent.InputTuple,
      AssignRolesEvent.OutputTuple,
      AssignRolesEvent.OutputObject
    >;
    AssignRoles: TypedContractEvent<
      AssignRolesEvent.InputTuple,
      AssignRolesEvent.OutputTuple,
      AssignRolesEvent.OutputObject
    >;

    "AvatarSet(address,address)": TypedContractEvent<
      AvatarSetEvent.InputTuple,
      AvatarSetEvent.OutputTuple,
      AvatarSetEvent.OutputObject
    >;
    AvatarSet: TypedContractEvent<
      AvatarSetEvent.InputTuple,
      AvatarSetEvent.OutputTuple,
      AvatarSetEvent.OutputObject
    >;

    "ConsumeAllowance(bytes32,uint128,uint128)": TypedContractEvent<
      ConsumeAllowanceEvent.InputTuple,
      ConsumeAllowanceEvent.OutputTuple,
      ConsumeAllowanceEvent.OutputObject
    >;
    ConsumeAllowance: TypedContractEvent<
      ConsumeAllowanceEvent.InputTuple,
      ConsumeAllowanceEvent.OutputTuple,
      ConsumeAllowanceEvent.OutputObject
    >;

    "DisabledModule(address)": TypedContractEvent<
      DisabledModuleEvent.InputTuple,
      DisabledModuleEvent.OutputTuple,
      DisabledModuleEvent.OutputObject
    >;
    DisabledModule: TypedContractEvent<
      DisabledModuleEvent.InputTuple,
      DisabledModuleEvent.OutputTuple,
      DisabledModuleEvent.OutputObject
    >;

    "EnabledModule(address)": TypedContractEvent<
      EnabledModuleEvent.InputTuple,
      EnabledModuleEvent.OutputTuple,
      EnabledModuleEvent.OutputObject
    >;
    EnabledModule: TypedContractEvent<
      EnabledModuleEvent.InputTuple,
      EnabledModuleEvent.OutputTuple,
      EnabledModuleEvent.OutputObject
    >;

    "ExecutionFromModuleFailure(address)": TypedContractEvent<
      ExecutionFromModuleFailureEvent.InputTuple,
      ExecutionFromModuleFailureEvent.OutputTuple,
      ExecutionFromModuleFailureEvent.OutputObject
    >;
    ExecutionFromModuleFailure: TypedContractEvent<
      ExecutionFromModuleFailureEvent.InputTuple,
      ExecutionFromModuleFailureEvent.OutputTuple,
      ExecutionFromModuleFailureEvent.OutputObject
    >;

    "ExecutionFromModuleSuccess(address)": TypedContractEvent<
      ExecutionFromModuleSuccessEvent.InputTuple,
      ExecutionFromModuleSuccessEvent.OutputTuple,
      ExecutionFromModuleSuccessEvent.OutputObject
    >;
    ExecutionFromModuleSuccess: TypedContractEvent<
      ExecutionFromModuleSuccessEvent.InputTuple,
      ExecutionFromModuleSuccessEvent.OutputTuple,
      ExecutionFromModuleSuccessEvent.OutputObject
    >;

    "HashExecuted(bytes32)": TypedContractEvent<
      HashExecutedEvent.InputTuple,
      HashExecutedEvent.OutputTuple,
      HashExecutedEvent.OutputObject
    >;
    HashExecuted: TypedContractEvent<
      HashExecutedEvent.InputTuple,
      HashExecutedEvent.OutputTuple,
      HashExecutedEvent.OutputObject
    >;

    "HashInvalidated(bytes32)": TypedContractEvent<
      HashInvalidatedEvent.InputTuple,
      HashInvalidatedEvent.OutputTuple,
      HashInvalidatedEvent.OutputObject
    >;
    HashInvalidated: TypedContractEvent<
      HashInvalidatedEvent.InputTuple,
      HashInvalidatedEvent.OutputTuple,
      HashInvalidatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RevokeFunction(bytes32,address,bytes4)": TypedContractEvent<
      RevokeFunctionEvent.InputTuple,
      RevokeFunctionEvent.OutputTuple,
      RevokeFunctionEvent.OutputObject
    >;
    RevokeFunction: TypedContractEvent<
      RevokeFunctionEvent.InputTuple,
      RevokeFunctionEvent.OutputTuple,
      RevokeFunctionEvent.OutputObject
    >;

    "RevokeTarget(bytes32,address)": TypedContractEvent<
      RevokeTargetEvent.InputTuple,
      RevokeTargetEvent.OutputTuple,
      RevokeTargetEvent.OutputObject
    >;
    RevokeTarget: TypedContractEvent<
      RevokeTargetEvent.InputTuple,
      RevokeTargetEvent.OutputTuple,
      RevokeTargetEvent.OutputObject
    >;

    "RolesModSetup(address,address,address,address)": TypedContractEvent<
      RolesModSetupEvent.InputTuple,
      RolesModSetupEvent.OutputTuple,
      RolesModSetupEvent.OutputObject
    >;
    RolesModSetup: TypedContractEvent<
      RolesModSetupEvent.InputTuple,
      RolesModSetupEvent.OutputTuple,
      RolesModSetupEvent.OutputObject
    >;

    "ScopeFunction(bytes32,address,bytes4,tuple[],uint8)": TypedContractEvent<
      ScopeFunctionEvent.InputTuple,
      ScopeFunctionEvent.OutputTuple,
      ScopeFunctionEvent.OutputObject
    >;
    ScopeFunction: TypedContractEvent<
      ScopeFunctionEvent.InputTuple,
      ScopeFunctionEvent.OutputTuple,
      ScopeFunctionEvent.OutputObject
    >;

    "ScopeTarget(bytes32,address)": TypedContractEvent<
      ScopeTargetEvent.InputTuple,
      ScopeTargetEvent.OutputTuple,
      ScopeTargetEvent.OutputObject
    >;
    ScopeTarget: TypedContractEvent<
      ScopeTargetEvent.InputTuple,
      ScopeTargetEvent.OutputTuple,
      ScopeTargetEvent.OutputObject
    >;

    "SetAllowance(bytes32,uint128,uint128,uint128,uint64,uint64)": TypedContractEvent<
      SetAllowanceEvent.InputTuple,
      SetAllowanceEvent.OutputTuple,
      SetAllowanceEvent.OutputObject
    >;
    SetAllowance: TypedContractEvent<
      SetAllowanceEvent.InputTuple,
      SetAllowanceEvent.OutputTuple,
      SetAllowanceEvent.OutputObject
    >;

    "SetDefaultRole(address,bytes32)": TypedContractEvent<
      SetDefaultRoleEvent.InputTuple,
      SetDefaultRoleEvent.OutputTuple,
      SetDefaultRoleEvent.OutputObject
    >;
    SetDefaultRole: TypedContractEvent<
      SetDefaultRoleEvent.InputTuple,
      SetDefaultRoleEvent.OutputTuple,
      SetDefaultRoleEvent.OutputObject
    >;

    "SetUnwrapAdapter(address,bytes4,address)": TypedContractEvent<
      SetUnwrapAdapterEvent.InputTuple,
      SetUnwrapAdapterEvent.OutputTuple,
      SetUnwrapAdapterEvent.OutputObject
    >;
    SetUnwrapAdapter: TypedContractEvent<
      SetUnwrapAdapterEvent.InputTuple,
      SetUnwrapAdapterEvent.OutputTuple,
      SetUnwrapAdapterEvent.OutputObject
    >;

    "TargetSet(address,address)": TypedContractEvent<
      TargetSetEvent.InputTuple,
      TargetSetEvent.OutputTuple,
      TargetSetEvent.OutputObject
    >;
    TargetSet: TypedContractEvent<
      TargetSetEvent.InputTuple,
      TargetSetEvent.OutputTuple,
      TargetSetEvent.OutputObject
    >;
  };
}
