/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SparkPSMInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "convertToAssetValue"
      | "convertToAssets"
      | "convertToShares(address,uint256)"
      | "convertToShares(uint256)"
      | "deposit"
      | "owner"
      | "pocket"
      | "previewDeposit"
      | "previewSwapExactIn"
      | "previewSwapExactOut"
      | "previewWithdraw"
      | "rateProvider"
      | "renounceOwnership"
      | "setPocket"
      | "shares"
      | "susds"
      | "swapExactIn"
      | "swapExactOut"
      | "totalAssets"
      | "totalShares"
      | "transferOwnership"
      | "usdc"
      | "usds"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "OwnershipTransferred"
      | "PocketSet"
      | "Swap"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "convertToAssetValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pocket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewSwapExactIn",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewSwapExactOut",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rateProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPocket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "susds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapExactIn",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactOut",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "usds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "convertToAssetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pocket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewSwapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPocket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "susds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    asset: AddressLike,
    user: AddressLike,
    receiver: AddressLike,
    assetsDeposited: BigNumberish,
    sharesMinted: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    user: string,
    receiver: string,
    assetsDeposited: bigint,
    sharesMinted: bigint
  ];
  export interface OutputObject {
    asset: string;
    user: string;
    receiver: string;
    assetsDeposited: bigint;
    sharesMinted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PocketSetEvent {
  export type InputTuple = [
    oldPocket: AddressLike,
    newPocket: AddressLike,
    amountTransferred: BigNumberish
  ];
  export type OutputTuple = [
    oldPocket: string,
    newPocket: string,
    amountTransferred: bigint
  ];
  export interface OutputObject {
    oldPocket: string;
    newPocket: string;
    amountTransferred: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    assetIn: AddressLike,
    assetOut: AddressLike,
    sender: AddressLike,
    receiver: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    referralCode: BigNumberish
  ];
  export type OutputTuple = [
    assetIn: string,
    assetOut: string,
    sender: string,
    receiver: string,
    amountIn: bigint,
    amountOut: bigint,
    referralCode: bigint
  ];
  export interface OutputObject {
    assetIn: string;
    assetOut: string;
    sender: string;
    receiver: string;
    amountIn: bigint;
    amountOut: bigint;
    referralCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    asset: AddressLike,
    user: AddressLike,
    receiver: AddressLike,
    assetsWithdrawn: BigNumberish,
    sharesBurned: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    user: string,
    receiver: string,
    assetsWithdrawn: bigint,
    sharesBurned: bigint
  ];
  export interface OutputObject {
    asset: string;
    user: string;
    receiver: string;
    assetsWithdrawn: bigint;
    sharesBurned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SparkPSM extends BaseContract {
  connect(runner?: ContractRunner | null): SparkPSM;
  waitForDeployment(): Promise<this>;

  interface: SparkPSMInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  convertToAssetValue: TypedContractMethod<
    [numShares: BigNumberish],
    [bigint],
    "view"
  >;

  convertToAssets: TypedContractMethod<
    [asset: AddressLike, numShares: BigNumberish],
    [bigint],
    "view"
  >;

  "convertToShares(address,uint256)": TypedContractMethod<
    [asset: AddressLike, assets: BigNumberish],
    [bigint],
    "view"
  >;

  "convertToShares(uint256)": TypedContractMethod<
    [assetValue: BigNumberish],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<
    [asset: AddressLike, receiver: AddressLike, assetsToDeposit: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pocket: TypedContractMethod<[], [string], "view">;

  previewDeposit: TypedContractMethod<
    [asset: AddressLike, assetsToDeposit: BigNumberish],
    [bigint],
    "view"
  >;

  previewSwapExactIn: TypedContractMethod<
    [assetIn: AddressLike, assetOut: AddressLike, amountIn: BigNumberish],
    [bigint],
    "view"
  >;

  previewSwapExactOut: TypedContractMethod<
    [assetIn: AddressLike, assetOut: AddressLike, amountOut: BigNumberish],
    [bigint],
    "view"
  >;

  previewWithdraw: TypedContractMethod<
    [asset: AddressLike, maxAssetsToWithdraw: BigNumberish],
    [[bigint, bigint] & { sharesToBurn: bigint; assetsWithdrawn: bigint }],
    "view"
  >;

  rateProvider: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPocket: TypedContractMethod<
    [newPocket: AddressLike],
    [void],
    "nonpayable"
  >;

  shares: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  susds: TypedContractMethod<[], [string], "view">;

  swapExactIn: TypedContractMethod<
    [
      assetIn: AddressLike,
      assetOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      receiver: AddressLike,
      referralCode: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  swapExactOut: TypedContractMethod<
    [
      assetIn: AddressLike,
      assetOut: AddressLike,
      amountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      receiver: AddressLike,
      referralCode: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalShares: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  usds: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [
      asset: AddressLike,
      receiver: AddressLike,
      maxAssetsToWithdraw: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "convertToAssetValue"
  ): TypedContractMethod<[numShares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToAssets"
  ): TypedContractMethod<
    [asset: AddressLike, numShares: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "convertToShares(address,uint256)"
  ): TypedContractMethod<
    [asset: AddressLike, assets: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "convertToShares(uint256)"
  ): TypedContractMethod<[assetValue: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [asset: AddressLike, receiver: AddressLike, assetsToDeposit: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pocket"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "previewDeposit"
  ): TypedContractMethod<
    [asset: AddressLike, assetsToDeposit: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewSwapExactIn"
  ): TypedContractMethod<
    [assetIn: AddressLike, assetOut: AddressLike, amountIn: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewSwapExactOut"
  ): TypedContractMethod<
    [assetIn: AddressLike, assetOut: AddressLike, amountOut: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewWithdraw"
  ): TypedContractMethod<
    [asset: AddressLike, maxAssetsToWithdraw: BigNumberish],
    [[bigint, bigint] & { sharesToBurn: bigint; assetsWithdrawn: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "rateProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPocket"
  ): TypedContractMethod<[newPocket: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shares"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "susds"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapExactIn"
  ): TypedContractMethod<
    [
      assetIn: AddressLike,
      assetOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      receiver: AddressLike,
      referralCode: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactOut"
  ): TypedContractMethod<
    [
      assetIn: AddressLike,
      assetOut: AddressLike,
      amountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      receiver: AddressLike,
      referralCode: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalShares"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usds"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      receiver: AddressLike,
      maxAssetsToWithdraw: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PocketSet"
  ): TypedContractEvent<
    PocketSetEvent.InputTuple,
    PocketSetEvent.OutputTuple,
    PocketSetEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(address,address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PocketSet(address,address,uint256)": TypedContractEvent<
      PocketSetEvent.InputTuple,
      PocketSetEvent.OutputTuple,
      PocketSetEvent.OutputObject
    >;
    PocketSet: TypedContractEvent<
      PocketSetEvent.InputTuple,
      PocketSetEvent.OutputTuple,
      PocketSetEvent.OutputObject
    >;

    "Swap(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
